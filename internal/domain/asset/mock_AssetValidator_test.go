// Code generated by mockery v2.20.0. DO NOT EDIT.

package asset

import mock "github.com/stretchr/testify/mock"

// MockAssetValidator is an autogenerated mock type for the Validator type
type MockAssetValidator struct {
	mock.Mock
}

type MockAssetValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssetValidator) EXPECT() *MockAssetValidator_Expecter {
	return &MockAssetValidator_Expecter{mock: &_m.Mock}
}

// validateAssetForCreateAndUpdate provides a mock function with given fields: a
func (_m *MockAssetValidator) validateAssetForCreateAndUpdate(a *Asset) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Asset) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetValidator_validateAssetForCreateAndUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'validateAssetForCreateAndUpdate'
type MockAssetValidator_validateAssetForCreateAndUpdate_Call struct {
	*mock.Call
}

// validateAssetForCreateAndUpdate is a helper method to define mock.On call
//   - a *Asset
func (_e *MockAssetValidator_Expecter) validateAssetForCreateAndUpdate(a interface{}) *MockAssetValidator_validateAssetForCreateAndUpdate_Call {
	return &MockAssetValidator_validateAssetForCreateAndUpdate_Call{Call: _e.mock.On("validateAssetForCreateAndUpdate", a)}
}

func (_c *MockAssetValidator_validateAssetForCreateAndUpdate_Call) Run(run func(a *Asset)) *MockAssetValidator_validateAssetForCreateAndUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Asset))
	})
	return _c
}

func (_c *MockAssetValidator_validateAssetForCreateAndUpdate_Call) Return(_a0 error) *MockAssetValidator_validateAssetForCreateAndUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetValidator_validateAssetForCreateAndUpdate_Call) RunAndReturn(run func(*Asset) error) *MockAssetValidator_validateAssetForCreateAndUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// validateBalanceAndLimitForTransaction provides a mock function with given fields: a, trx
func (_m *MockAssetValidator) validateBalanceAndLimitForTransaction(a *Asset, trx *Transaction) error {
	ret := _m.Called(a, trx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Asset, *Transaction) error); ok {
		r0 = rf(a, trx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssetValidator_validateBalanceAndLimitForTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'validateBalanceAndLimitForTransaction'
type MockAssetValidator_validateBalanceAndLimitForTransaction_Call struct {
	*mock.Call
}

// validateBalanceAndLimitForTransaction is a helper method to define mock.On call
//   - a *Asset
//   - trx *Transaction
func (_e *MockAssetValidator_Expecter) validateBalanceAndLimitForTransaction(a interface{}, trx interface{}) *MockAssetValidator_validateBalanceAndLimitForTransaction_Call {
	return &MockAssetValidator_validateBalanceAndLimitForTransaction_Call{Call: _e.mock.On("validateBalanceAndLimitForTransaction", a, trx)}
}

func (_c *MockAssetValidator_validateBalanceAndLimitForTransaction_Call) Run(run func(a *Asset, trx *Transaction)) *MockAssetValidator_validateBalanceAndLimitForTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Asset), args[1].(*Transaction))
	})
	return _c
}

func (_c *MockAssetValidator_validateBalanceAndLimitForTransaction_Call) Return(_a0 error) *MockAssetValidator_validateBalanceAndLimitForTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssetValidator_validateBalanceAndLimitForTransaction_Call) RunAndReturn(run func(*Asset, *Transaction) error) *MockAssetValidator_validateBalanceAndLimitForTransaction_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAssetValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAssetValidator creates a new instance of MockAssetValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAssetValidator(t mockConstructorTestingTNewMockAssetValidator) *MockAssetValidator {
	mock := &MockAssetValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
