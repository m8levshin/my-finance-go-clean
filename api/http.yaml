openapi: 3.0.0
info:
  title: My finance - DDD-golang example
  version: 1.0.0
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get a list of all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{uuid}:
    get:
      summary: Get a specific user by UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: The UUID of the user
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: The user's name.
          example: John Doe
        email:
          type: string
          description: The user's email address.
          format: email
          example: john.doe@example.com
        password:
          type: string
          description: The user's password.
          example: mypassword123
      required:
        - name
        - email
        - password
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: The user's unique ID.
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: The user's name.
          example: John Doe
        email:
          type: string
          description: The user's email address.
          format: email
          example: john.doe@example.com
      required:
        - id
        - name
        - email
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          description: A human-readable error message.
      required:
        - code
        - message